/*
 * This file is generated by jOOQ.
 */
package com.wuda.tester.mysql.orm;


import com.wuda.tester.mysql.orm.tables.IndividualUserGeneral;
import com.wuda.tester.mysql.orm.tables.Item;
import com.wuda.tester.mysql.orm.tables.ItemDescription;
import com.wuda.tester.mysql.orm.tables.ItemGeneral;
import com.wuda.tester.mysql.orm.tables.Store;
import com.wuda.tester.mysql.orm.tables.StoreGeneral;
import com.wuda.tester.mysql.orm.tables.User;

import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MysqlTester extends SchemaImpl {

    private static final long serialVersionUID = -928382410;

    /**
     * The reference instance of <code>mysql_tester</code>
     */
    public static final MysqlTester MYSQL_TESTER = new MysqlTester();

    /**
     * 个人用户－基本信息
     */
    public final IndividualUserGeneral INDIVIDUAL_USER_GENERAL = IndividualUserGeneral.INDIVIDUAL_USER_GENERAL;

    /**
     * 代表所有的物品
     */
    public final Item ITEM = Item.ITEM;

    /**
     * item的描述信息，通常作为详情的一个字段，但是，由于描述信息通常内容较多，很多orm框架都是select *，分开了可以避免查询出来（有时候根本就没用到），而且大数据量的字段更新性能较差，如果需要更新，会影响到核心item表，因此单独作为一个表保存。也可以表示物品某个规格的描述信息，如果variation id不等于0
     */
    public final ItemDescription ITEM_DESCRIPTION = ItemDescription.ITEM_DESCRIPTION;

    /**
     * 物品基本信息，也可以表示物品某个规格的基本信息，如果variation id不等于0
     */
    public final ItemGeneral ITEM_GENERAL = ItemGeneral.ITEM_GENERAL;

    /**
     * 店铺信息
     */
    public final Store STORE = Store.STORE;

    /**
     * 店铺基本信息
     */
    public final StoreGeneral STORE_GENERAL = StoreGeneral.STORE_GENERAL;

    /**
     * 用户有很多类型，比如一种分类方法是把用户分成个人用户和企业用户，而不同类型的用户需要的字段不一样，但是他们都是用户，即 is-a user。这个表属于所有用户的基本信息，其他不同类型的用户有自己专属的表，然后用用户ID关联回这个表。这样做还有一个好处，那就是其他表中的用户ID都统一关联回这个表，这样用户ID就不会有歧义了。
     */
    public final User USER = User.USER;

    /**
     * No further instances allowed
     */
    private MysqlTester() {
        super("mysql_tester", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.<Table<?>>asList(
            IndividualUserGeneral.INDIVIDUAL_USER_GENERAL,
            Item.ITEM,
            ItemDescription.ITEM_DESCRIPTION,
            ItemGeneral.ITEM_GENERAL,
            Store.STORE,
            StoreGeneral.STORE_GENERAL,
            User.USER);
    }
}
