/*
 * This file is generated by jOOQ.
 */
package com.wuda.tester.mysql.orm.tables;


import com.wuda.tester.mysql.orm.Indexes;
import com.wuda.tester.mysql.orm.Keys;
import com.wuda.tester.mysql.orm.MysqlTester;
import com.wuda.tester.mysql.orm.tables.records.ItemGeneralRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * 物品基本信息，也可以表示物品某个规格的基本信息，如果variation id不等于0
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemGeneral extends TableImpl<ItemGeneralRecord> {

    private static final long serialVersionUID = 389832504;

    /**
     * The reference instance of <code>mysql_tester.item_general</code>
     */
    public static final ItemGeneral ITEM_GENERAL = new ItemGeneral();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemGeneralRecord> getRecordType() {
        return ItemGeneralRecord.class;
    }

    /**
     * The column <code>mysql_tester.item_general.item_general_id</code>.
     */
    public final TableField<ItemGeneralRecord, ULong> ITEM_GENERAL_ID = createField(DSL.name("item_general_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>mysql_tester.item_general.item_name</code>.
     */
    public final TableField<ItemGeneralRecord, String> ITEM_NAME = createField(DSL.name("item_name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>mysql_tester.item_general.item_id</code>.
     */
    public final TableField<ItemGeneralRecord, ULong> ITEM_ID = createField(DSL.name("item_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql_tester.item_general.item_variation_id</code>.
     */
    public final TableField<ItemGeneralRecord, ULong> ITEM_VARIATION_ID = createField(DSL.name("item_variation_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>mysql_tester.item_general.create_time</code>.
     */
    public final TableField<ItemGeneralRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mysql_tester.item_general.create_user_id</code>.
     */
    public final TableField<ItemGeneralRecord, ULong> CREATE_USER_ID = createField(DSL.name("create_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql_tester.item_general.last_modify_time</code>.
     */
    public final TableField<ItemGeneralRecord, LocalDateTime> LAST_MODIFY_TIME = createField(DSL.name("last_modify_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mysql_tester.item_general.last_modify_user_id</code>.
     */
    public final TableField<ItemGeneralRecord, ULong> LAST_MODIFY_USER_ID = createField(DSL.name("last_modify_user_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql_tester.item_general.is_deleted</code>.
     */
    public final TableField<ItemGeneralRecord, ULong> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>mysql_tester.item_general</code> table reference
     */
    public ItemGeneral() {
        this(DSL.name("item_general"), null);
    }

    /**
     * Create an aliased <code>mysql_tester.item_general</code> table reference
     */
    public ItemGeneral(String alias) {
        this(DSL.name(alias), ITEM_GENERAL);
    }

    /**
     * Create an aliased <code>mysql_tester.item_general</code> table reference
     */
    public ItemGeneral(Name alias) {
        this(alias, ITEM_GENERAL);
    }

    private ItemGeneral(Name alias, Table<ItemGeneralRecord> aliased) {
        this(alias, aliased, null);
    }

    private ItemGeneral(Name alias, Table<ItemGeneralRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("物品基本信息，也可以表示物品某个规格的基本信息，如果variation id不等于0"), TableOptions.table());
    }

    public <O extends Record> ItemGeneral(Table<O> child, ForeignKey<O, ItemGeneralRecord> key) {
        super(child, key, ITEM_GENERAL);
    }

    @Override
    public Schema getSchema() {
        return MysqlTester.MYSQL_TESTER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ITEM_GENERAL_FK_ITEM_ID, Indexes.ITEM_GENERAL_FK_ITEM_VARIATION_ID);
    }

    @Override
    public Identity<ItemGeneralRecord, ULong> getIdentity() {
        return Keys.IDENTITY_ITEM_GENERAL;
    }

    @Override
    public UniqueKey<ItemGeneralRecord> getPrimaryKey() {
        return Keys.KEY_ITEM_GENERAL_PRIMARY;
    }

    @Override
    public List<UniqueKey<ItemGeneralRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemGeneralRecord>>asList(Keys.KEY_ITEM_GENERAL_PRIMARY);
    }

    @Override
    public ItemGeneral as(String alias) {
        return new ItemGeneral(DSL.name(alias), this);
    }

    @Override
    public ItemGeneral as(Name alias) {
        return new ItemGeneral(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemGeneral rename(String name) {
        return new ItemGeneral(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemGeneral rename(Name name) {
        return new ItemGeneral(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, String, ULong, ULong, LocalDateTime, ULong, LocalDateTime, ULong, ULong> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
